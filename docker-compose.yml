services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-portfolio}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-portfolio_password}
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - webnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-portfolio}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT:-5432}:5432"

  # Next.js Application
  web:
    build:
      context: .
      tags:
        - sabidzpro/portfolio:latest
    env_file:
      - .env
    environment:
      # Next.js runtime envs
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-https://sabidzpro.is-a.dev}
      - NODE_ENV=production

      # Database URL (connect to postgres service)
      - DATABASE_URL=postgresql://${POSTGRES_USER:-portfolio}:${POSTGRES_PASSWORD:-portfolio_password}@postgres:5432/${POSTGRES_DB:-portfolio_db}?schema=public

      # Auto seed on first run
      - AUTO_SEED=${AUTO_SEED:-true}

      # AUTH (GitHub OAuth)
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_GITHUB_ID=${AUTH_GITHUB_ID}
      - AUTH_GITHUB_SECRET=${AUTH_GITHUB_SECRET}

      # Vercel Blob Storage (for image uploads)
      - BLOB_READ_WRITE_TOKEN=${BLOB_READ_WRITE_TOKEN}

      # Server-only envs
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}

      # Admin access
      - CADDY_EMAIL=${CADDY_EMAIL}
    restart: unless-stopped
    networks:
      - webnet
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - ACME_AGREE=true
      - PUID=1000
      - PGID=1000
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    networks:
      - webnet
    depends_on:
      web:
        condition: service_healthy

networks:
  webnet:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  caddy_data:
  caddy_config: